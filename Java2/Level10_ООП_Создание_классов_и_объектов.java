package Java2;

/** Например класс - это чертёж робота, а объект - это уже сам робот со значениями и данными;
 * Наследование - это добавление полезных опций к чертежу робота (например добавить лазер в класс - Наследники), функционал которого взят из родительского класса;
 * Полиморфизм - это общий функционал для всех роботов, и его можно переписать для определённой модели робота, например в главном классе мы указали способ передвижения робота, а в классе "Наследники" - указали способ левитации, и в другом классе указали способ - плавать, то есть имеется общий функционал, но его можно дополнять и переписывать;
 * Инкапсуляция - это броня, защищающая робота, то есть свободного доступа к коду не будет, и можно будет получить доступ только по спец. методу (то есть по модификатору доступа: Protected или Prived).
*/


public class Level10_ООП_Создание_классов_и_объектов { /** описание транспортного средства */
                               
    public static void main(String[] args) { /** public static void main(String[] args) - это один метод (функция) например у нас есть программа, в которой нам нужно регулярно пользоваться кодами, и здесь нам пригодятся "Функции", чтобы не пришлось повторять снова код */
        Level10_OOP_Transport bmw = new Level10_OOP_Transport(); /** создаём объект на основе класса "Level10_OOP_Transport" для доступа к нему, назвали перемнную "bmw" и выделили под объект память "new" */
        bmw.setValues(250.5f, 2500, "Белый цвет", new byte[] {0, 0, 0}); /** обратились к нашему методу "setValues" из класса "Level10_OOP_Transport" чтобы подряд прописать более коротко наши значения, и ниже переменные где были записаны значения можно закамитить */
        String result1 = bmw.getValues(); /** обращаемся к методу "getValues" из класса "Level10_OOP_Transport" чтобы получать возвращаемые значения, и предварительно создав переменную-строку, чтобы выводить её */
            System.out.println(result1);

    // bmw.speed = 250.5f; /** обратились к переменной "bmw" и переменной "speed" из класса "Level10_OOP_Transport" и присвоили значение скорости авто */
    // bmw.weight = 2500; /** то есть плюс в том что мы можем просто обращаться к переменной в другом классе и придвавать им значения для нашей переменной "bmw" */
    // bmw.color = "Белый цвет"; /** и также можем создать ещё одну переменную новую и также придать значения уже имеющимся переменным-полям, чтобы заново их не создавать */
    // bmw.coordinate = new byte[] {0, 0, 0}; /** выделили память и создали массив данных с координатами, если допустим пишем игру, то координаты будут по осям: X, Y, Z */
  
        Level10_OOP_Transport truck = new Level10_OOP_Transport();
        truck.speed = 140.5f; /** здесь допустим у грузовика не использовали наш метод "setValues" из класса "Level10_OOP_Transport" чтобы подряд прописать более коротко наши значения, и ниже переменные где были записаны значения можно закамитить, а прописали вручную */
        truck.weight = 5600;  
        truck.coordinate = new byte[] {100, 0, 100}; 
        truck.color = "Красный"; /** и можно хоть что делать с этими переменными - выводить, перебирать, и т.д. */

        String result2 = truck.getValues(); /** обращаемся к методу "getValues" из класса "Level10_OOP_Transport" чтобы получать возвращаемые значения, и предварительно создав переменную-строку, чтобы выводить её */
            System.out.println(result2);

    //  System.out.println("Скорость BMW: " + bmw.speed + "; Скорость грузовика: " + truck.speed); /** затем можно вывести значения переменных на экран, и за счёт того мы присвоили переменным значения в созданных объектах, они не накладываются друг на друга */

    }                                      
}




